package com.example.codemail;

import android.os.Bundle;
import android.view.View;
import android.view.Menu;

import com.google.android.material.snackbar.Snackbar;
import com.google.android.material.navigation.NavigationView;

import androidx.navigation.NavController;
import androidx.navigation.Navigation;
import androidx.navigation.ui.AppBarConfiguration;
import androidx.navigation.ui.NavigationUI;
import androidx.drawerlayout.widget.DrawerLayout;
import androidx.appcompat.app.AppCompatActivity;

import com.example.codemail.databinding.ActivityMainBinding;

public class MainActivity extends AppCompatActivity {

    private AppBarConfiguration mAppBarConfiguration;
    private ActivityMainBinding binding;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        //
        //his line uses View Binding (feature of android generated by ActivityMainBindin class)to inflate
        // the XML layout file associated with the activity (activity_main.xml)
        // and creates an instance of the ActivityMainBinding class.
        // inflation is process of creating actual instances(view objects) of the UI elements described in the XML.
        //"inflate" refers to the process of converting an XML layout file into its corresponding View objects in memory.

        // binding is an instance of the ActivityMainBinding class, which is generated by the View Binding feature in Android.
        // binding provides direct references to all the views defined in the
        // corresponding XML layout file (activity_main.xml).
        binding = ActivityMainBinding.inflate(getLayoutInflater());
        setContentView(binding.getRoot()); //This line sets the root view of the inflated layout as the content view
        // for the activity. It makes the UI defined in the XML layout file (activity_main.xml)
        // visible on the screen. The binding.getRoot() method retrieves the root view of the inflated layout.

        //So, in simple terms, after this line executes, the variable binding holds an
        // instance of the ActivityMainBinding class, and this instance provides direct references to
        // all the views defined in the associated XML layout file (activity_main.xml).
        // It's a convenient way to access and manipulate those views in your code without the need for findViewById calls.

        setSupportActionBar(binding.appBarMain.toolbar);
        binding.appBarMain.fab.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                Snackbar.make(view, "Replace with your own action", Snackbar.LENGTH_LONG)
                        .setAction("Action", null).show();
            }
        });
        DrawerLayout drawer = binding.drawerLayout;
        NavigationView navigationView = binding.navView;
        // Passing each menu ID as a set of Ids because each
        // menu should be considered as top level destinations.
        mAppBarConfiguration = new AppBarConfiguration.Builder(
                R.id.nav_home, R.id.nav_inbox, R.id.nav_outbox, R.id.nav_trash)
                .setOpenableLayout(drawer)
                .build();
        NavController navController = Navigation.findNavController(this, R.id.nav_host_fragment_content_main);
        NavigationUI.setupActionBarWithNavController(this, navController, mAppBarConfiguration);
        NavigationUI.setupWithNavController(navigationView, navController);
    }

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        // Inflate the menu; this adds items to the action bar if it is present.
        getMenuInflater().inflate(R.menu.main, menu);
        return true;
    }

    @Override
    public boolean onSupportNavigateUp() {
        NavController navController = Navigation.findNavController(this, R.id.nav_host_fragment_content_main);
        return NavigationUI.navigateUp(navController, mAppBarConfiguration)
                || super.onSupportNavigateUp();
    }
}